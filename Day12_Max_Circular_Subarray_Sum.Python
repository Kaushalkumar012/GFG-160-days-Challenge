def circularSubarraySum(arr):
    n = len(arr)
    
    # Helper function: Kadane's algorithm to find max subarray sum
    def kadane(arr):
        max_ending_here = arr[0]
        max_so_far = arr[0]
        for i in range(1, len(arr)):
            max_ending_here = max(arr[i], max_ending_here + arr[i])
            max_so_far = max(max_so_far, max_ending_here)
        return max_so_far

    # Step 1: Max subarray sum without wrap
    max_kadane = kadane(arr)

    # Step 2: Max subarray sum with wrap
    total_sum = sum(arr)
    # Invert the array to find the minimum subarray sum
    min_kadane = kadane([-x for x in arr])
    max_wrap = total_sum + min_kadane  # Subtracting min_kadane is equivalent to adding its positive value
    
    # Step 3: Handle all negative array case
    if max_wrap == 0:  # All elements are negative, max_wrap calculation becomes zero
        return max_kadane
    
    # Step 4: Return the maximum of both cases
    return max(max_kadane, max_wrap)
